#include "pch.h"
#include "Playfair.hpp"
#include "DirectioningStringsDecryptor.hpp"


DirectioningStringsDecryptor::DirectioningStringsDecryptor() :
    directioning_strings(get_directioning_strings())
{}

std::vector<Buffer> DirectioningStringsDecryptor::get_directioning_strings()
{
    return {
        { 0xc7,  0xde,  0x65,  0x25,  0x8a,  0xd2,  0x8d,  0x97,  0x5b,  0x96,  0x29,  0x67,  0xf2,  0x0f,  0x97,  0x98,  0x0b,  0x8b,  0xb4,  0x03,  0x0d,  0x0a,  0xbf,  0xdd,  0xa8,  0x12,  0x39,  0x24,  0x0f,  0x61,  0x86,  0x5f,  0x89,  }, 
        { 0x60,  0xca,  0xc9,  0x0b,  0xcc,  0x13,  0xa1,  0xec,  0x99,  0xe8,  0x28,  0x41,  0xbf,  0x6f,  0xa8,  0xa3,  0x63,  0x6b,  0x82,  0xf3,  0xa7,  0x01,  0x51,  0xeb,  0x41,  0xb0,  0x6d,  0x57,  0xa8,  0xa4,  0x44,  0x14,  }, 
        { 0x14,  0x7a,  0x06,  0xed,  0x3c,  0x98,  0x55,  0x80,  0x58,  0x29,  0x19,  0x86,  0x8a,  0x39,  0x42,  0x4e,  0x5f,  0x2c,  0xe3,  0x67,  0xd5,  0x32,  0xec,  0x0b,  0xd3,  0x83,  0x8e,  0xf0,  0xc1,  0x93,  0x0f,  0x10,  0x85,  0x38,  0x1b,  0xa4,  0x4a,  0x06,  0x30,  0x2c,  0xc3,  0x20,  0xf6,  0xf1,  0x37,  0xc7,  0xf0,  0x2a,  }, 
        { 0x32,  0x3b,  0xa4,  0x30,  0x26,  0x82,  0xcf,  0x11,  0x49,  0x23,  0x4e,  0x57,  0x76,  0x48,  0x2e,  0x54,  0xe3,  0xca,  0x41,  0x1f,  0x58,  0x6c,  0x64,  0xec,  0x49,  0x70,  0x3d,  0x8d,  0x16,  0x21,  0x8c,  0x0b,  0x80,  0x30,  0x08,  0x25,  0x14,  0xbc,  0x0f,  0x53,  0xf5,  0xf2,  0xe4,  0x14,  0x1b,  0x2c,  0x98,  0x56,  0xf0,  0x55,  0x55,  0xa8,  0x59,  0x95,  0x91,  0xe1,  0x3a,  0xb4,  0xfb,  0xa6,  0x8a,  0x73,  0x08,  0x60,  0x55,  0xab,  0xf1,  0x94,  0x0b,  0x29,  0x85,  0xcc,  0x93,  0x1d,  0x21,  0x34,  0x5a,  0xdd,  0xb9,  0x18,  }, 
        { 0x24,  0x22,  0x00,  0xa4,  0xf4,  0x69,  0x07,  0x39,  0x6a,  0x6c,  0x72,  0xe2,  0x1d,  0x5f,  0x23,  0xb1,  0xf5,  0xb2,  0x06,  0x02,  0xd6,  0xd4,  0xb2,  0x48,  0xcc,  0x0d,  0xe5,  0xcd,  0xa0,  0xa9,  0x1a,  0xd5,  0x56,  0xdf,  0x95,  0x9d,  0x17,  0x54,  0x9f,  0x8b,  0xca,  0x11,  0x58,  0x6d,  0x1c,  0x94,  0xdd,  0x45,  }, 
        { 0xa3,  0x25,  0x72,  0x1e,  0x2d,  0x4a,  0x1f,  0xbd,  0x59,  0x24,  0x8a,  0x77,  0xf9,  0x87,  0x4d,  0xf1,  0x73,  0x03,  0x99,  0x10,  0xd6,  0x78,  0xad,  0x0d,  0x84,  0xb3,  0x01,  0x53,  0x99,  0x75,  0x7b,  0x05,  }, 
        { 0x3c,  0xef,  0xcc,  0x67,  0xe7,  0xc1,  0xde,  0xf3,  0x69,  0x58,  0x2a,  0x20,  0x3a,  0x5d,  0x42,  0x5e,  0xd6,  0x7d,  0x59,  0x03,  0x90,  0xb3,  0x59,  0x63,  0xb3,  0x91,  0x59,  0xf1,  0xc4,  0xc5,  0x25,  0xd2,  }, 
        { 0x95,  0x70,  0xbc,  0x0c,  0x89,  0x38,  0x45,  0x7b,  0xdc,  0x3a,  0x2f,  0x33,  0x20,  0xbb,  0x18,  0xa9,  0x62,  0xc1,  0xd2,  0x0e,  0xf8,  0xfa,  0x05,  0xb4,  0xb5,  0x8e,  0x51,  0x8e,  0x98,  0xaa,  0x51,  0x15,  0x7d,  0xea,  0xcf,  0x19,  0x95,  0x06,  0x89,  0x11,  0x0d,  0x0a,  0xb4,  0x69,  0x18,  0xc9,  0x32,  0x9d,  0x85,  0x19,  0x17,  0x70,  0xb4,  0x33,  0xb2,  0x88,  0x37,  0x82,  0xee,  0xa4,  0x52,  0x07,  0x3c,  0x81,  0x89,  }, 
        { 0x96,  0xcb,  0x4b,  0x85,  0x28,  0x97,  0xf4,  0x13,  0x91,  0x07,  0x4b,  0x22,  0x91,  0xba,  0x50,  0x97,  0x70,  0x1e,  0xe4,  0xd4,  0xf6,  0xa4,  0x4c,  0x4a,  0x09,  0x6d,  0x90,  0xd4,  0x90,  0x47,  0x26,  0x70,  0x7f,  0x0b,  0x0e,  0x67,  0xcd,  0x88,  0xcc,  0xc3,  0xd8,  0xec,  0x7c,  0x0d,  0x0a,  0x51,  0x4b,  0x0d,  0x04,  0xf0,  0x28,  0xe5,  0xd3,  0x92,  0x7e,  0x2d,  0x84,  0xbd,  0xbf,  0xd7,  0xe5,  0x2d,  0x15,  0x37,  0x57,  }, 
        { 0x10,  0xd5,  0x2f,  0x26,  0x57,  0x1f,  0x42,  0x22,  0xc1,  0xcb,  0x39,  0x55,  0x13,  0x7f,  0xca,  0xe7,  0x45,  0x19,  0x69,  0xea,  0xe0,  0xcd,  0xab,  0x58,  0xce,  0x96,  0x03,  0x40,  0x58,  0x11,  0xf0,  0x89,  }, 
        { 0x25,  0xa2,  0x59,  0x60,  0xe3,  0xee,  0x8f,  0x01,  0x63,  0x17,  0x7d,  0xd5,  0xc0,  0x53,  0xd0,  0x45,  0x5b,  0x02,  0x20,  0x5e,  0xb2,  0x32,  0x45,  0xdb,  0xa4,  0x68,  0x9d,  0x7f,  0xab,  0x5a,  0x7f,  0x42,  0x3d,  0xdb,  0xce,  0x1e,  0xe5,  0x6b,  0xfa,  0xcc,  0x19,  0x7f,  0x2e,  0xff,  0x3f,  0xb0,  0x4f,  0x93,  0xcb,  0x59,  0x7c,  0x21,  0xe6,  0x24,  0x27,  0x88,  0x2a,  0x54,  0xf5,  0x7f,  0xc7,  0x54,  0xaa,  0xa6,  0x21,  0x70,  0xf1,  0x29,  0x13,  0x0f,  0x16,  0x8a,  0x8d,  0x9a,  0x9c,  0xbd,  0xee,  0x51,  0xb5,  0x58,  }, 
        { 0x0e,  0xd0,  0xf7,  0x57,  0x46,  0x41,  0x2b,  0x66,  0x11,  0x8d,  0x34,  0xec,  0x11,  0x5d,  0xb1,  0x65,  0x2d,  0x5b,  0xf1,  0x4a,  0x67,  0xd9,  0x05,  0x05,  0xb4,  0xe0,  0xd8,  0x4b,  0x1b,  0xeb,  0x8a,  0xc0,  0x98,  0x69,  0xff,  0xd5,  0x6c,  0xfe,  0xff,  0x42,  0x97,  0x37,  0xca,  0xb3,  0x5a,  0x95,  0xa3,  0x9e,  0xa4,  0x0b,  0x89,  0x4c,  0x0c,  0x1f,  0xee,  0xf7,  0xc9,  0x00,  0x32,  0x3f,  0xf4,  0x64,  0xd9,  0xd6,  }, 
        { 0x1b,  0x87,  0x22,  0x63,  0xc4,  0xdc,  0x6a,  0xea,  0xd9,  0x32,  0x13,  0x3d,  0xd9,  0x92,  0xc6,  0xd2,  0x59,  0x5c,  0xbb,  0xf4,  0x80,  0x3a,  0x0d,  0x0a,  0xa0,  0xd0,  0x0c,  0x13,  0x75,  0x4f,  0x8d,  0x80,  0x71,  }, 
        { 0xca,  0xca,  0xba,  0xf0,  0x10,  0x9d,  0x72,  0x7c,  0x1d,  0x8b,  0x73,  0x5f,  0x66,  0x7e,  0x54,  0xb2,  0xf6,  0xbf,  0xac,  0x1d,  0x09,  0x24,  0xd9,  0xd2,  0x89,  0x48,  0x1e,  0x14,  0xc3,  0xac,  0x68,  0x4d,  0xc9,  0xa9,  0xc1,  0x0c,  0xd7,  0x7b,  0x38,  0xc5,  0x8a,  0x23,  0x20,  0x16,  0xf7,  0x93,  0x5b,  0x99,  }, 
        { 0x5c,  0xce,  0x0e,  0x1e,  0x60,  0xbf,  0xba,  0xa6,  0x31,  0x5f,  0x29,  0x06,  0x62,  0x20,  0x7d,  0x7b,  0x26,  0x51,  0x01,  0x22,  0xe4,  0x57,  0xe4,  0xc4,  0x7b,  0x48,  0x25,  0xeb,  0x7e,  0xf1,  0x05,  0x33,  0x85,  0xfe,  0xc9,  0x2c,  0xfd,  0x9c,  0xe7,  0x2b,  0x39,  0x91,  0xa7,  0xd0,  0x93,  0xb5,  0x7b,  0xbf,  }, 
        { 0xf8,  0x0d,  0x0a,  0x42,  0x70,  0xfb,  0xb2,  0x71,  0x3d,  0x21,  0x39,  0xae,  0x69,  0x9e,  0x29,  0x04,  0xca,  0xdc,  0x89,  0xdf,  0xf1,  0x1a,  0xa5,  0xcd,  0xeb,  0x39,  0x68,  0x94,  0x0b,  0xc2,  0xa9,  0x25,  0xa7,  0x94,  0x98,  0x44,  0x79,  0x67,  0x9b,  0x4d,  0x0f,  0x14,  0x79,  0xc5,  0x83,  0x81,  0xa8,  0xac,  0xc3,  0x47,  0xa1,  0x0e,  0x9f,  0x10,  0xc3,  0x70,  0x08,  0xb5,  0xd9,  0xe4,  0x63,  0x2f,  0xb8,  0xb8,  0x85,  }, 
        { 0xd6,  0xdc,  0x61,  0x79,  0xf8,  0x44,  0x62,  0xc6,  0xb1,  0x4e,  0x8f,  0x9a,  0xf7,  0x34,  0xc7,  0xb7,  0xaf,  0x2d,  0x45,  0x0b,  0x94,  0x8d,  0xdc,  0xe1,  0x31,  0x71,  0x42,  0x00,  0xd2,  0x60,  0x28,  0xb4,  0xe6,  0x89,  0xa9,  0x80,  0xcd,  0xad,  0xd4,  0xab,  0x44,  0x8e,  0x75,  0x2c,  0x21,  0x8d,  0x17,  0x70,  0x33,  0xf6,  0xb0,  0xa4,  0x4c,  0x66,  0x79,  0x80,  0x87,  0xd7,  0xc7,  0xc6,  0x99,  0x36,  0x68,  0x04,  }, 
        { 0xc7,  0x6b,  0x15,  0xaa,  0x8f,  0x09,  0x54,  0xd6,  0xf4,  0x4b,  0x52,  0x12,  0x02,  0x50,  0x3a,  0x4a,  0x4f,  0xbe,  0x2f,  0xa9,  0xde,  0x0d,  0x0a,  0x50,  0x55,  0xce,  0xb5,  0xe0,  0xef,  0xe3,  0x20,  0xad,  0x37,  0xfa,  0x19,  0x7e,  0xf9,  0xa0,  0x6b,  0x01,  0x87,  0xd0,  0x8f,  0x68,  0x7b,  0x98,  0x94,  0xe8,  0x06,  0x76,  0x22,  0x04,  0x83,  0xad,  0xe0,  0x41,  0x5b,  0x4f,  0x84,  0x57,  0x10,  0xa7,  0x90,  0x48,  0xf4,  0x9b,  0x35,  0xd2,  0xfc,  0x28,  0xa0,  0x05,  0x6e,  0x19,  0xb0,  0x6c,  0x59,  0x50,  0x0b,  0x4f,  0x44,  }, 
        { 0xec,  0x7f,  0x76,  0x1a,  0x7c,  0xa0,  0xd0,  0x73,  0x5b,  0x16,  0x71,  0x46,  0x9b,  0x44,  0x58,  0x1a,  0x8a,  0x32,  0x63,  0xac,  0x7a,  0x0f,  0xd5,  0xf7,  0x58,  0xef,  0xb6,  0xeb,  0x8d,  0xb4,  0xc6,  0x32,  0xe3,  0xaf,  0x79,  0x87,  0xe5,  0xa4,  0x74,  0x06,  0xac,  0xa8,  0x09,  0x4f,  0xe9,  0x8f,  0x84,  0xb4,  }, 
    };
}

Buffer DirectioningStringsDecryptor::get_directioning_string(size_t index)
{
    return directioning_strings.at(index);
}

/*Buffer DirectioningStringsDecryptor::encrypt_directioning_string(size_t index, uint8_t key)// const
{
    Playfair decryptor(std::to_string(key));
    directioning_strings.at(index) = decryptor.encrypt(directioning_strings.at(index));
    return directioning_strings.at(index);
}

Buffer DirectioningStringsDecryptor::decrypt_directioning_string(size_t index, uint8_t key)// const
{
    Playfair decryptor(std::to_string(key));
    directioning_strings.at(index) = decryptor.decrypt(directioning_strings.at(index)); // TODO don't subsitute the string, just return it
    return directioning_strings.at(index);
}*/
